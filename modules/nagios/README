nagios

= Requirements

This module requires the apache_httpd and php modules for the server part,
though they can be disabled.

The plugin packages used for RHEL with selinux enabled should have the
libexecdir directory properly set to /usr/libexec in order to avoid selinux
denials. Such packages can be found on http://dl.marmotte.net/rpms/

When SELinux is enforcing, the selinux::audit2allow definition is required
to allow some basic nagios/nrpe accesses, though it can also be disabled.

= Sample Usage

Nagios server instance (node specific) :

    class { 'nagios::server':
        apache_httpd_ssl => false,
        apache_httpd_conf_source => 'puppet:///files/www/nagios-httpd.conf',
        apache_httpd_htpasswd_source => 'puppet:///files/www/htpasswd',
        cgi_authorized_for_system_information => '*',
        cgi_authorized_for_configuration_information => '*',
        cgi_authorized_for_system_commands => '*',
        cgi_authorized_for_all_services => '*',
        cgi_authorized_for_all_hosts => '*',
        cgi_authorized_for_all_service_commands => '*',
        cgi_authorized_for_all_host_commands => '*',
        cgi_default_statusmap_layout => '3',
    }

Nagios client instances (from site.pp) :

    class { 'nagios::client':
        nrpe_allowed_hosts => '127.0.0.1,192.168.1.1',
    }

Nagios client specific overrides (see var.pp for the list) :

    nagios::client::config { 'host_address': value => $ipaddress_eth2 }

Nagios client check configuration examples :

    nagios::client::config { 'check_ram_ensure': value => 'absent' }
    nagios::client::config { 'check_cpu_args': value => '-w 50 -c 20' }

Global disabling of a default check :

    Nagios::Check::Swap { ensure => absent }

Debug any startup or configuration problems on the server with :

    nagios -v /etc/nagios/nagios.cfg

To enable nagiosgraph on the server :

    class { 'nagios::nagiosgraph':
        # This is the default
        perflog => '/var/log/nagios/service_perfdata.log',
        # To enable the mouseover graphs
        nagios_service_action_url => '/nagiosgraph/cgi-bin/show.cgi?host=$HOSTNAME$&service=$SERVICEDESC$\' onMouseOver=\'showGraphPopup(this)\' onMouseOut=\'hideGraphPopup()\' rel=\'/nagiosgraph/cgi-bin/showgraph.cgi?host=$HOSTNAME$&service=$SERVICEDESC$',
        ssi => true,
    }

    class { 'nagios::server':
        process_performance_data => '1',
        service_perfdata_file    => '/var/log/nagios/service_perfdata.log',
        service_perfdata_file_template => '$LASTSERVICECHECK$||$HOSTNAME$||$SERVICEDESC$||$SERVICEOUTPUT$||$SERVICEPERFDATA$',
        service_perfdata_file_processing_interval => '30',
        service_perfdata_file_processing_command => 'process-service-perfdata-nagiosgraph',
    }

To enable nagiosgraph for the client's services in the server web interface :

    class { 'nagios::client':
        service_use => 'generic-service,nagiosgraph-service',
    }


Notes :
 Client overrides should be done in this order :
 * For all services on some nodes : Using nagios::client service_* parameters
 * For all services on a node : Using the nagios::client host_* parameters
 * For specific services on all nodes : Using Nagios::Check::Foo { paramname => 'value' }
 * For specific services on a node : Using nagios::client::config { 'check_foo_ensure': value => 'absent' }

